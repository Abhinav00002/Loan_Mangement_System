package com.lms.repo;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.jpa.repository.query.Procedure;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.lms.model.AccountStatement;

@Repository
public interface AccountStatementRepository extends JpaRepository<AccountStatement, Long> {
	  @Transactional
    @Procedure(name = "GetAccountStatement")
    List<Map<String, Object>> getAccountStatement(@Param("accountId") Integer accountId);
	  
	  @Query(value = "SELECT  "
	  		+ "    MAX(id) AS id,   "
	  		+ "    SUM(depositAmount) AS depositAmount,   "
	  		+ "    SUM(withdrawalAmount) AS withdrawalAmount, "
	  		+ "    MAX(salaryAmount) AS salaryAmount, "
	  		+ "    dcrDate,   "
	  		+ "    depositDate,   "
	  		+ "    branchName,   "
	  		+ "    accountId,   "
	  		+ "    accountName,   "
	  		+ "    accountBankId,   "
	  		+ "    accountBankName,   "
	  		+ "    accountBankCity,   "
	  		+ "    accountBankType,   "
	  		+ "    accountBankStatus "
	  		+ "FROM (  "
	  		+ "    SELECT   "
	  		+ "        dm.id AS id,   "
	  		+ "        dm.amount AS depositAmount,   "
	  		+ "        NULL AS withdrawalAmount,   "
	  		+ "        dm.dcr_date AS dcrDate,   "
	  		+ "        dm.deposit_date AS depositDate,   "
	  		+ "        dm.branch_name AS branchName,   "
	  		+ "        am.id AS accountId,   "
	  		+ "        am.account_name AS accountName,   "
	  		+ "        am.bank_id AS accountBankId,   "
	  		+ "        am.bank_name AS accountBankName,   "
	  		+ "        am.bank_city AS accountBankCity,   "
	  		+ "        am.bank_type AS accountBankType,   "
	  		+ "        am.status AS accountBankStatus,   "
	  		+ "        NULL AS salaryAmount "
	  		+ "    FROM deposit_master dm  "
	  		+ "    LEFT JOIN account_master am ON dm.account_id = am.id  "
	  		+ "    WHERE dm.account_id =:accountId AND dm.clear_status != 1    "
	  		+ ""
	  		+ "    UNION ALL  "
	  		+ ""
	  		+ "    SELECT  "
	  		+ "        NULL AS id,   "
	  		+ "        NULL AS depositAmount,   "
	  		+ "        wm.amount AS withdrawalAmount,   "
	  		+ "        wm.dcr_date AS dcrDate,   "
	  		+ "        wm.deposit_date AS depositDate,   "
	  		+ "        wm.branch_name AS branchName,   "
	  		+ "        am.id AS accountId,   "
	  		+ "        am.account_name AS accountName,   "
	  		+ "        am.bank_id AS accountBankId,   "
	  		+ "        am.bank_name AS accountBankName,   "
	  		+ "        am.bank_city AS accountBankCity,   "
	  		+ "        am.bank_type AS accountBankType,   "
	  		+ "        am.status AS accountBankStatus,  "
	  		+ "        NULL AS salaryAmount"
	  		+ "    FROM withdrawal_master wm  "
	  		+ "    LEFT JOIN account_master am ON wm.account_id = am.id  "
	  		+ "    WHERE wm.account_id = :accountId AND wm.clear_status != 1   "
	  		+ ""
	  		+ "    UNION ALL  "
	  		+ ""
	  		+ "    SELECT   "
	  		+ "        NULL AS id,   "
	  		+ "        NULL AS depositAmount,   "
	  		+ "        NULL AS withdrawalAmount,   "
	  		+ "        sp.salary_date AS dcrDate,   "
	  		+ "        sp.entry_date AS depositDate,   "
	  		+ "        sp.branch_name AS branchName,   "
	  		+ "        am.id AS accountId,   "
	  		+ "        am.account_name AS accountName,   "
	  		+ "        am.bank_id AS accountBankId,   "
	  		+ "        am.bank_name AS accountBankName,   "
	  		+ "        am.bank_city AS accountBankCity,   "
	  		+ "        am.bank_type AS accountBankType,   "
	  		+ "        am.status AS accountBankStatus,  "
	  		+ "        sp.amount AS salaryAmount "
	  		+ "    FROM salary_paid sp  "
	  		+ "    LEFT JOIN account_master am ON sp.account = am.id   "
	  		+ "    WHERE sp.account = :accountId "
	  		+ ") AS CombinedData  "
	  		+ "GROUP BY dcrDate, depositDate, branchName, accountId, accountName, accountBankId, accountBankName, accountBankCity, accountBankType, accountBankStatus  "
	  		+ "ORDER BY dcrDate, id " 
	  	 ,nativeQuery = true)
	  List<Map<String, Object>> getAccountStatement1(@Param("accountId") Integer accountId);
	
	  @Query(value = "SELECT   "
	  		+ "    MAX(id) AS id,    "
	  		+ "    SUM(depositAmount) AS depositAmount,    "
	  		+ "    SUM(withdrawalAmount) AS withdrawalAmount,  "
	  		+ "    MAX(salaryAmount) AS salaryAmount,  "
	  		+ "    dcrDate,    "
	  		+ "    depositDate,    "
	  		+ "    branchName,    "
	  		+ "    accountId,    "
	  		+ "    accountName,    "
	  		+ "    accountBankId,    "
	  		+ "    accountBankName,    "
	  		+ "    accountBankCity,    "
	  		+ "    accountBankType,    "
	  		+ "    accountBankStatus  "
	  		+ "FROM (   "
	  		+ "    SELECT    "
	  		+ "        dm.id AS id,    "
	  		+ "        dm.amount AS depositAmount,    "
	  		+ "        NULL AS withdrawalAmount,    "
	  		+ "        dm.dcr_date AS dcrDate,    "
	  		+ "        dm.deposit_date AS depositDate,    "
	  		+ "        dm.branch_name AS branchName,    "
	  		+ "        am.id AS accountId,    "
	  		+ "        am.account_name AS accountName,    "
	  		+ "        am.bank_id AS accountBankId,    "
	  		+ "        am.bank_name AS accountBankName,    "
	  		+ "        am.bank_city AS accountBankCity,    "
	  		+ "        am.bank_type AS accountBankType,    "
	  		+ "        am.status AS accountBankStatus,    "
	  		+ "        NULL AS salaryAmount  "
	  		+ "    FROM deposit_master dm   "
	  		+ "    LEFT JOIN account_master am ON dm.account_id = am.id   "
	  		+ "    WHERE dm.account_id = :accountId AND dm.clear_status != 1  AND dm.dcr_date  BETWEEN  :toDate AND  :fromDate   "
	  		+ " "
	  		+ "    UNION ALL   "
	  		+ " "
	  		+ "    SELECT   "
	  		+ "        NULL AS id,    "
	  		+ "        NULL AS depositAmount,    "
	  		+ "        wm.amount AS withdrawalAmount,    "
	  		+ "        wm.dcr_date AS dcrDate,    "
	  		+ "        wm.deposit_date AS depositDate,    "
	  		+ "        wm.branch_name AS branchName,    "
	  		+ "        am.id AS accountId,    "
	  		+ "        am.account_name AS accountName,    "
	  		+ "        am.bank_id AS accountBankId,    "
	  		+ "        am.bank_name AS accountBankName,    "
	  		+ "        am.bank_city AS accountBankCity,    "
	  		+ "        am.bank_type AS accountBankType,    "
	  		+ "        am.status AS accountBankStatus,   "
	  		+ "        NULL AS salaryAmount "
	  		+ "    FROM withdrawal_master wm   "
	  		+ "    LEFT JOIN account_master am ON wm.account_id = am.id   "
	  		+ "    WHERE wm.account_id = :accountId AND wm.clear_status != 1 AND wm.dcr_date  BETWEEN  :toDate AND  :fromDate  "
	  		+ " "
	  		+ "    UNION ALL   "
	  		+ " "
	  		+ "    SELECT    "
	  		+ "        NULL AS id,    "
	  		+ "        NULL AS depositAmount,    "
	  		+ "        NULL AS withdrawalAmount,    "
	  		+ "        sp.salary_date AS dcrDate,    "
	  		+ "        sp.entry_date AS depositDate,    "
	  		+ "        sp.branch_name AS branchName,    "
	  		+ "        am.id AS accountId,    "
	  		+ "        am.account_name AS accountName,    "
	  		+ "        am.bank_id AS accountBankId,    "
	  		+ "        am.bank_name AS accountBankName,    "
	  		+ "        am.bank_city AS accountBankCity,    "
	  		+ "        am.bank_type AS accountBankType,    "
	  		+ "        am.status AS accountBankStatus,   "
	  		+ "        sp.amount AS salaryAmount  "
	  		+ "    FROM salary_paid sp   "
	  		+ "    LEFT JOIN account_master am ON sp.account = am.id    "
	  		+ "    WHERE sp.account = :accountId AND sp.salary_date  BETWEEN  :toDate AND  :fromDate  "
	  		+ ") AS CombinedData   "
	  		+ "GROUP BY dcrDate, depositDate, branchName, accountId, accountName, accountBankId, accountBankName, accountBankCity, accountBankType, accountBankStatus   "
	  		+ "ORDER BY dcrDate, id ",nativeQuery = true)
	  List<Map<String, Object>> getAccountStatementBetweentoDateAndfromDate(@Param("accountId") Integer accountId,@Param("toDate") LocalDate toDate,@Param("fromDate") LocalDate fromDate);
		
}

